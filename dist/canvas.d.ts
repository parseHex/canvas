// Generated by dts-bundle v0.7.3

declare module 'canvas' {
    import * as draw from 'canvas/draw';
    import * as utility from 'canvas/utility';
    export { setLoop } from 'canvas/loop';
    export { draw };
    export { utility };
    /**
        * Set the canvas element (and context) that will be used for all future operations.
        */
    export function setCanvas(canvas: HTMLCanvasElement): void;
    /**
        * Set a separate canvas element that will be used for drawing the background (set with the loop).
        * This can help with performance since the background can be draw once on a separate canvas.
        *
        * Be sure to set this before adding a loop.
        */
    export function setBackgroundCanvas(canvas: HTMLCanvasElement): void;
}

declare module 'canvas/draw' {
    import * as ifc from 'canvas/ifc';
    /**
        * Draw a rectange on the canvas.
        */
    export function rect(opts: ifc.RectOptions): void;
    /**
        * Draw a circle on the canvas.
        * (Actually just calls `draw.ellipse` without the `.ry` property if there is one.)
        */
    export function circle(opts: ifc.EllipseOptions): void;
    /**
        * Draw an ellipse on the canvas.
        */
    export function ellipse(opts: ifc.EllipseOptions): void;
    /**
        * Draw a line on the canvas.
        */
    export function line(opts: ifc.LineOptions): void;
    /**
        * Draw text on the canvas.
        */
    export function text(opts: ifc.TextOptions): void;
}

declare module 'canvas/utility' {
    import * as ifc from 'canvas/ifc';
    /**
        * Clear the canvas context using `clearRect`.
        */
    export function clear(): void;
    /**
        * Set the canvas context's transform to its default values.
        */
    export function resetTransform(): void;
    /**
        * Add an onClick handler to the canvas.
        * The handler will be called with the coordinate of the click in the canvas.
        * (Currently, `event.offsetX` and `event.offsetY` are where the coordinates come from.)
        */
    export function onClick(handler: (mousePos: ifc.Coordinate) => void): void;
}

declare module 'canvas/loop' {
    export type LoopFunction = (currentFrame: number) => void;
    export interface LoopOptions {
        loopFunction: LoopFunction;
        timing?: boolean;
        clearEachFrame?: boolean;
        background?: string;
        framerate?: number;
    }
    /**
      * Set a loop which will be called continuously using `requestAnimationFrame`.
      */
    export function setLoop(opts: LoopOptions): void;
}

declare module 'canvas/ifc' {
    export interface Coordinate {
        x: number;
        y: number;
    }
    export interface Rectangle extends Coordinate {
        width: number;
        height: number;
    }
    export interface Ellipse extends Coordinate {
        rx: number;
        ry?: number;
    }
    export interface RectOptions extends Rectangle {
        fill?: string;
        stroke?: string;
    }
    export interface EllipseOptions extends Ellipse {
        fill?: string;
        stroke?: string;
    }
    export interface TextOptions extends Coordinate {
        text: string;
        color?: string;
        fontName?: string;
        sizePX?: number;
    }
    export interface LineOptions {
        point1: Coordinate;
        point2: Coordinate;
        lineWidth?: number;
        color?: string;
    }
}

